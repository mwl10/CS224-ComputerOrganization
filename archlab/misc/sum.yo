                            | # Matthew Lowery
                            | # execution begins at address 0
0x000:                      |   .pos 0
0x000: 30f40001000000000000 |   irmovq stack, %rsp  # set up stack pointer
0x00a: 804800000000000000   |   call main           # execute main program
0x013: 00                   |   halt                # terminate program
                            | 
                            | # sample linked list
0x018:                      | .align 8
0x018:                      | ele1:
0x018: 0a00000000000000     | .quad 0x00a
0x020: 2800000000000000     | .quad ele2
0x028:                      | ele2:
0x028: b000000000000000     | .quad 0x0b0
0x030: 3800000000000000     | .quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     | .quad 0xc00
0x040: 0000000000000000     | .quad 0
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 |   irmovq ele1, %rdi
0x052: 805c00000000000000   |   call sum_list
0x05b: 90                   |   ret
                            | 
                            | # begin sum.ys
                            | # long sum_list(list_ptr ls)
                            | # start in %rdi, sum in %rax
                            | 
0x05c:                      | sum_list:
0x05c: 6300                 |   xorq %rax, %rax       # zero out register # sum is zero
0x05e: 708700000000000000   |   jmp test
0x067:                      | loop:
0x067: 50a70000000000000000 |   mrmovq (%rdi), %r10   # get first val
0x071: 60a0                 |   addq %r10, %rax       # add to sum
0x073: c0f70800000000000000 |   iaddq $8, %rdi        # move to address of next val
0x07d: 50770000000000000000 |   mrmovq (%rdi), %rdi   # place in the register
0x087:                      | test:
0x087: 6277                 |   andq %rdi, %rdi       # stop when 0 is in the register
0x089: 746700000000000000   |   jne loop
0x092: 63aa                 |   xorq %r10, %r10       # restore register r10
0x094: 90                   |   ret
                            | 
                            | # end sum.ys
                            | # stack starts here and grows to lower addresses
0x100:                      |   .pos 0x100
0x100:                      | stack:
