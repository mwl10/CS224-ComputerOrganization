                            | # Matthew Lowery
                            | # execution begins at address 0
0x000:                      |   .pos 0
0x000: 30f40001000000000000 |   irmovq stack, %rsp  # set up stack pointer
0x00a: 804800000000000000   |   call main           # execute main program
0x013: 00                   |   halt                # terminate program
                            | 
                            | # sample linked list
0x018:                      | .align 8
0x018:                      | ele1:
0x018: 0a00000000000000     | .quad 0x00a
0x020: 2800000000000000     | .quad ele2
0x028:                      | ele2:
0x028: b000000000000000     | .quad 0x0b0
0x030: 3800000000000000     | .quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     | .quad 0xc00
0x040: 0000000000000000     | .quad 0
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 |   irmovq ele1, %rdi
0x052: 805c00000000000000   |   call rsum_list
0x05b: 90                   |   ret
                            | 
                            | # begin rsum.ys
                            | # long rsum_list(list_ptr ls)
                            | # start in rdi, sum in rax
                            | 
0x05c:                      | rsum_list:
0x05c:                      | if:
0x05c: 6277                 |   andq %rdi, %rdi     # set condition codes
0x05e: 747200000000000000   |   jne else            # if not zero jump to else
0x067: 30f00000000000000000 |   irmovq $0, %rax     # set return value to 0
0x071: 90                   |   ret
0x072:                      | else:
0x072: a03f                 |   pushq %rbx          # save callee-saved register
0x074: 50370000000000000000 |   mrmovq (%rdi), %rbx # get start val
0x07e: c0f70800000000000000 |   iaddq $8, %rdi      # move to next address
0x088: 50770000000000000000 |   mrmovq (%rdi), %rdi # place in the register
0x092: 805c00000000000000   |   call rsum_list    # recursive function call
0x09b: 6030                 |   addq %rbx, %rax   # add * start to sum
0x09d: b03f                 |   popq %rbx         # restore callee-saved register
0x09f: 90                   |   ret
                            | 
                            | # end rsum.ys
                            | # stack starts here and grows to lower addresses
0x100:                      |   .pos 0x100
0x100:                      | stack:
