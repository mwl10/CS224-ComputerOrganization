                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f42807000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6a804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7a002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Matthew
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | # First, I included the iaddq function whenever possible
                            | # Then, I altered the loop header test to jump to conditionally jump to
                            | # the Loop instead of Done as this branch would be mispredicted less often
                            | # and altered the others with the same ideology in mind
                            | # I then applied the loop unrolling strategy multiple times (6) until I reached a threshold where
                            | # more loop unrolls became detrimental to the efficiency of the program
                            | # dealing with 6 values at a time and just looping again when there were still more than 6 values to copy left
                            | # and dealing with the last extra cases at the bottom in Finish0-4
                            | # I also replaced an unconditional jmp done command with ret
                            | # I tried to figure further means of speeding up the program and noticed that by using r10/r11 consecutively,
                            | # the program was being slowed down a bit, so I interchanged my use of r10 and r11 to get rid of dependencies/bubbles
                            | # i.e. two instructions that used r10 in a row were changed to an instruction
                            | # that used r10 followed by one that used r11 instead
                            | # And lastly, just in general tried to get rid of obvious redundancies or unnecessary instructions
                            | 
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 
0x032: 6300                 | xorq %rax, %rax
0x034: c0f2faffffffffffffff | iaddq $-6, %rdx
0x03e: 727001000000000000   | jl Finish0
0x047: 6222                 | andq %rdx, %rdx
0x049: 755300000000000000   | jge Loop
0x052: 90                   | ret
                            | 
0x053:                      | Loop:
0x053: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x05d: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x067: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x071: 62aa                 | 	andq %r10, %r10
0x073: 718600000000000000   | 	jle Loop1
0x07c: c0f00100000000000000 | 	iaddq $1, %rax
0x086:                      | Loop1:
0x086: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x090: 62bb                 | 	andq %r11, %r11
0x092: 71a500000000000000   | 	jle Loop2
0x09b: c0f00100000000000000 | 	iaddq $1, %rax
0x0a5:                      | Loop2:
0x0a5: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x0af: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x0b9: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0c3: 62aa                 | 	andq %r10, %r10
0x0c5: 71d800000000000000   | 	jle Loop3
0x0ce: c0f00100000000000000 | 	iaddq $1, %rax
0x0d8:                      | Loop3:
0x0d8: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0e2: 62bb                 | 	andq %r11, %r11
0x0e4: 71f700000000000000   | 	jle Loop4
0x0ed: c0f00100000000000000 | 	iaddq $1, %rax
0x0f7:                      | Loop4:
0x0f7: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x101: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11
0x10b: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x115: 62aa                 | 	andq %r10, %r10
0x117: 712a01000000000000   | 	jle Loop5
0x120: c0f00100000000000000 | 	iaddq $1, %rax
0x12a:                      | Loop5:
0x12a: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)
0x134: 62bb                 | 	andq %r11, %r11
0x136: 714901000000000000   | 	jle Npos
0x13f: c0f00100000000000000 | 	iaddq $1, %rax
0x149:                      | Npos:
0x149: c0f73000000000000000 | 	iaddq $48, %rdi
0x153: c0f63000000000000000 | 	iaddq $48, %rsi
0x15d: c0f2faffffffffffffff | 	iaddq $-6, %rdx
0x167: 755300000000000000   | 	jge Loop
0x170:                      | Finish0:
0x170: c0f20500000000000000 | 	iaddq $5, %rdx
0x17a: 729c02000000000000   | 	jl Done
0x183: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x18d: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x197: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x1a1: 62aa                 | 	andq %r10, %r10
0x1a3: 71b601000000000000   | 	jle Finish1
0x1ac: c0f00100000000000000 | 	iaddq $1, %rax
0x1b6:                      | Finish1:
0x1b6: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x1c0: 729c02000000000000   | 	jl Done
0x1c9: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x1d3: 62bb                 | 	andq %r11, %r11
0x1d5: 71e801000000000000   | 	jle Finish2
0x1de: c0f00100000000000000 | 	iaddq $1, %rax
0x1e8:                      | Finish2:
0x1e8: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x1f2: 729c02000000000000   | 	jl Done
0x1fb: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x205: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x20f: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x219: 62aa                 | 	andq %r10, %r10
0x21b: 712e02000000000000   | 	jle Finish3
0x224: c0f00100000000000000 | 	iaddq $1, %rax
0x22e:                      | Finish3:
0x22e: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x238: 729c02000000000000   | 	jl Done
0x241: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x24b: 62bb                 | 	andq %r11, %r11
0x24d: 716002000000000000   | 	jle Finish4
0x256: c0f00100000000000000 | 	iaddq $1, %rax
0x260:                      | Finish4:
0x260: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x26a: 729c02000000000000   | 	jl Done
0x273: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x27d: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x287: 62aa                 | 	andq %r10, %r10
0x289: 719c02000000000000   | 	jle Done
0x292: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x29c:                      | Done:
0x29c: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x29d:                      | End:
                            | #/* $end ncopy-ys */
0x29d:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x2a0:                      | 	.align 8
0x2a0:                      | src:
0x2a0: ffffffffffffffff     | 	.quad -1
0x2a8: 0200000000000000     | 	.quad 2
0x2b0: fdffffffffffffff     | 	.quad -3
0x2b8: 0400000000000000     | 	.quad 4
0x2c0: fbffffffffffffff     | 	.quad -5
0x2c8: faffffffffffffff     | 	.quad -6
0x2d0: 0700000000000000     | 	.quad 7
0x2d8: f8ffffffffffffff     | 	.quad -8
0x2e0: 0900000000000000     | 	.quad 9
0x2e8: f6ffffffffffffff     | 	.quad -10
0x2f0: f5ffffffffffffff     | 	.quad -11
0x2f8: 0c00000000000000     | 	.quad 12
0x300: f3ffffffffffffff     | 	.quad -13
0x308: f2ffffffffffffff     | 	.quad -14
0x310: f1ffffffffffffff     | 	.quad -15
0x318: 1000000000000000     | 	.quad 16
0x320: 1100000000000000     | 	.quad 17
0x328: eeffffffffffffff     | 	.quad -18
0x330: edffffffffffffff     | 	.quad -19
0x338: 1400000000000000     | 	.quad 20
0x340: 1500000000000000     | 	.quad 21
0x348: 1600000000000000     | 	.quad 22
0x350: 1700000000000000     | 	.quad 23
0x358: e8ffffffffffffff     | 	.quad -24
0x360: 1900000000000000     | 	.quad 25
0x368: 1a00000000000000     | 	.quad 26
0x370: 1b00000000000000     | 	.quad 27
0x378: 1c00000000000000     | 	.quad 28
0x380: e3ffffffffffffff     | 	.quad -29
0x388: 1e00000000000000     | 	.quad 30
0x390: e1ffffffffffffff     | 	.quad -31
0x398: 2000000000000000     | 	.quad 32
0x3a0: 2100000000000000     | 	.quad 33
0x3a8: 2200000000000000     | 	.quad 34
0x3b0: 2300000000000000     | 	.quad 35
0x3b8: dcffffffffffffff     | 	.quad -36
0x3c0: dbffffffffffffff     | 	.quad -37
0x3c8: 2600000000000000     | 	.quad 38
0x3d0: d9ffffffffffffff     | 	.quad -39
0x3d8: d8ffffffffffffff     | 	.quad -40
0x3e0: d7ffffffffffffff     | 	.quad -41
0x3e8: 2a00000000000000     | 	.quad 42
0x3f0: 2b00000000000000     | 	.quad 43
0x3f8: d4ffffffffffffff     | 	.quad -44
0x400: d3ffffffffffffff     | 	.quad -45
0x408: 2e00000000000000     | 	.quad 46
0x410: 2f00000000000000     | 	.quad 47
0x418: 3000000000000000     | 	.quad 48
0x420: 3100000000000000     | 	.quad 49
0x428: 3200000000000000     | 	.quad 50
0x430: cdffffffffffffff     | 	.quad -51
0x438: 3400000000000000     | 	.quad 52
0x440: cbffffffffffffff     | 	.quad -53
0x448: 3600000000000000     | 	.quad 54
0x450: 3700000000000000     | 	.quad 55
0x458: c8ffffffffffffff     | 	.quad -56
0x460: c7ffffffffffffff     | 	.quad -57
0x468: c6ffffffffffffff     | 	.quad -58
0x470: c5ffffffffffffff     | 	.quad -59
0x478: c4ffffffffffffff     | 	.quad -60
0x480: c3ffffffffffffff     | 	.quad -61
0x488: c2ffffffffffffff     | 	.quad -62
0x490: c1ffffffffffffff     | 	.quad -63
0x498: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x4a0:                      | 	.align 16
0x4a0:                      | Predest:
0x4a0: fadebc0000000000     | 	.quad 0xbcdefa
0x4a8:                      | dest:
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0:                      | Postdest:
0x6a0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x6a8:                      | .align 8
                            | # Run time stack
0x6a8: 0000000000000000     | 	.quad 0
0x6b0: 0000000000000000     | 	.quad 0
0x6b8: 0000000000000000     | 	.quad 0
0x6c0: 0000000000000000     | 	.quad 0
0x6c8: 0000000000000000     | 	.quad 0
0x6d0: 0000000000000000     | 	.quad 0
0x6d8: 0000000000000000     | 	.quad 0
0x6e0: 0000000000000000     | 	.quad 0
0x6e8: 0000000000000000     | 	.quad 0
0x6f0: 0000000000000000     | 	.quad 0
0x6f8: 0000000000000000     | 	.quad 0
0x700: 0000000000000000     | 	.quad 0
0x708: 0000000000000000     | 	.quad 0
0x710: 0000000000000000     | 	.quad 0
0x718: 0000000000000000     | 	.quad 0
0x720: 0000000000000000     | 	.quad 0
                            | 
0x728:                      | Stack:
