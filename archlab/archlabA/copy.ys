# Matthew Lowery
# execution begins at address 0
  .pos 0
  irmovq stack, %rsp  # set up stack pointer
  call main           # execute main program
  halt                # terminate program

.align 8
# source block
src:
  .quad 0x00a
  .quad 0x0b0
  .quad 0xc00
# destination block
dest:
  .quad 0x111
  .quad 0x222
  .quad 0x333

main:
  irmovq src, %rdi
  irmovq dest, %rsi
  irmovq $3, %rdx
  call copy_block
  ret

# begin copy.ys
# long copy_block (long *src, long *dest, long len)

copy_block:
  irmovq $0, %rax
  jmp test
loop:
  mrmovq (%rdi), %rcx
  rmmovq %rcx, (%rsi)
  xorq %rcx, %rax
  iaddq $-1, %rdx
  iaddq $8, %rsi
  iaddq $8, %rdi
test:
  andq %rdx, %rdx
  jg loop
  xorq %rcx, %rcx # restore argument registers to zero
  xorq %rsi, %rsi
  xorq %rdi, %rdi
  ret
# end copy.ys
# stack starts here and grows to lower addresses
  .pos 0x100
stack:
